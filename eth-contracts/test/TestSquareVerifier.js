// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require("./Verifier.sol");

contract('TestSquareVerifier', accounts => {

    beforeEach(async function () { 
        this.contract = await verifier.new({from: accounts[0]});
    })

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('should accept correct proofs', async function () {
        let proof = {
            "a": ["0x1ba0df5159c4c75da8a30d34e28b0a2242b9634aed77c9b41b979e6081ed5033", "0x04a81e18c8c57362b000213bce6d533055ba4f830dc76abf9c5bf37907ffbdd0"],
            "b": [["0x272c1132c59a11b904df2e3921eaf7b40ce948a1a24e9b36dd6e2e04cc3e9560", "0x1535e1e6c5cb4d685ef68595487910d68d8813765f422b977b53e32f8c53fc94"], ["0x26e8a26d9bd754c038c42bb9b5b32b91a0c1463aba53b03eb8e224f1230f853a", "0x2c080f65faca972f26229da56b338fc12d62261f8626ec42659bc1090e7a983d"]],
            "c": ["0x08c833d09a989255fa84bd16e9b4374fbf2c59f92f8b67298771b72c03e56f7f", "0x2f85944aef8c9f217463077e0d8f85fdf5546b3b570820ade0cf9c95a3feb440"]
        }

        let inputs = ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]

        let result = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, inputs);

        assert.equal(result, true, "Correct proof not accepted.")
    })

    // Test verification with incorrect proof.
    it('should reject incorrect proofs', async function () {
        
        // We use the proof of 10^2=100.

        let proof = {
            "a": ["0x271fa496ef9adfa3d7cda1f3c7376df9a136e767f5e687c6ac9b0cf0543bbb04", "0x1a1cf8d74af3f25a251f926300f678ce3bd1a67aedb4d81d8d30dee4c0346774"],
            "b": [["0x06f6425affd6076055997965625f4e0e6ec63454fa455b8bff6da90414bd705d", "0x0563ed346d5a35ad2c0d8c89c07364d5c5e376b7f4d2d3ec370aef2ae38096bb"], ["0x138872dc3d3b6ebcf8b0b789f2c47c5e4364a9f74d65eb440ec1cd06f82f72c5", "0x2dfb6214774254a840d38d3f276dcb20257febff754f5ed9453b7695c13dfb5c"]],
            "c": ["0x0422eba2cd789233ba5b0d547df96365acf9a89a5bf670344ea9b4e1a2c83739", "0x0039bf22968bdd25c488d57be673bba2b43c652fc2f3ec1a741e4234348b5c9f"]
        }

        // The input is 99, which obviosuly is not equal to 100, so it must fail.
        let inputs = ["0x63", "0x01"]

        let result = await this.contract.verifyTx.call(proof.a, proof.b, proof.c, inputs);

        assert.equal(result, false, "Incorrect proof not rejected.")
    })
})